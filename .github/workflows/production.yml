name: Build and Deploy to EKS

on:
  push:
    branches:
      - production

env:
  AWS_REGION: ap-southeast-1
  EKS_CLUSTER_NAME: healthmed-cluster
  DEPLOYMENT_NAME: patient-service-deployment 
  IMAGE: ecr-repo-patient
  RELEASE: blue

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v2

      # Configure AWS credentials
      - name: Configure AWS Credentials
        # run: |
        #   echo "retreiving secrets"
        #   echo ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #   echo ${{ env.AWS_REGION }}
        #   echo "retreiving success"
        uses: aws-actions/configure-aws-credentials@v3
          
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Authenticate kubectl with EKS
      - name: Authenticate kubectl with EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build \
            --tag "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            --build-arg K8APPVERSION="$GITHUB_SHA" \
            .

      # # Login to Amazon ECR
      # - name: Login to Amazon ECR
      #   run: |
      #     aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

      # # Push the Docker image to Amazon ECR
      # - name: Push Docker Image to ECR
      #   run: |
      #     docker push "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE:$GITHUB_SHA"

      # # Identify branch and setup files to deploy
      # - name: Check for green branch and set RELEASE env variable
      #   if: ${{ contains(github.ref, 'green') }}
      #   run: |
      #     echo "RELEASE=green" >> $GITHUB_ENV
      #     echo "${RELEASE} release will be deployed"

      # # Deploy the Docker image to the EKS cluster
      # - name: Deploy to EKS
      #   run: |
      #     kubectl set image deployment/$DEPLOYMENT_NAME-$RELEASE \
      #       $DEPLOYMENT_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE:$GITHUB_SHA" -n default
      #     kubectl rollout status deployment/$DEPLOYMENT_NAME-$RELEASE -n default
      #     kubectl get services -n default

      # # Check if green release is present or not
      # - name: Check if green release is present
      #   run: |
      #     echo "IS_GREEN_DEPLOYED=$(if [ "$(kubectl get pod -l app=satellite-prod-v1 -o jsonpath='{.items}')" = "[]" ]; then echo "false"; else echo "true"; fi)" >> $GITHUB_ENV

      # # Create blue/green release and modify traffic weight
      # - name: Create blue/green release and modify traffic
      #   if: ${{ env.IS_GREEN_DEPLOYED == 'true' }}
      #   run: |
      #     kubectl set image deployment/$DEPLOYMENT_NAME-${RELEASE} \
      #       $DEPLOYMENT_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE:$GITHUB_SHA" -n default
      #     echo "Created service and switched traffic"

